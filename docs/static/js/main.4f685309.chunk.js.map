{"version":3,"sources":["components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js","resources/images/logo.png"],"names":["Navbar","react_default","a","createElement","className","href","src","Logo","width","height","alt","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nanoleafData","numPanels","sideLength","positionData","panelId","x","y","o","color","Navbar_Navbar_Navbar","id","NanoleafLayout_default","data","onClick","console","log","onHover","onExit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4f685309.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Logo from '../../resources/images/logo.png';\nimport './Navbar.css';\n\nexport default class Navbar extends Component {\n  render() {\n      return (\n          <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm fixed\">\n              <a className=\"navbar-brand\" href=\"/\">\n                  <img src={Logo} width=\"30\" height=\"30\" alt=\"Triangle Logo\" />\n              </a>\n              <h5 className=\"my-0 mr-md-auto font-weight-normal\">Nanoleaf Layout</h5>\n              <nav className=\"my-2 my-md-0 mr-md-3\">\n                  <a className=\"p-2 text-dark\" href=\"#about\">About</a>\n                  <a className=\"p-2 text-dark\" href=\"#examples\">Examples</a>\n                  <a className=\"p-2 text-dark\" href=\"#support\">Support</a>\n                  <a className=\"p-2 text-dark\" href=\"#github\">Github</a>\n                  <a className=\"p-2 text-dark\" href=\"#\">Sponsor</a>\n              </nav>\n          </div>\n      )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport NanoleafLayout from 'nanoleaf-layout/lib/NanoleafLayout';\nimport Navbar from \"./components/Navbar/Navbar\";\n\nclass App extends Component {\n  constructor() {\n      super();\n\n      this.state = {\n          nanoleafData: {\n              numPanels: 10,\n              sideLength: 150,\n              positionData: [{\n                  panelId: 1,\n                  x: 100,\n                  y: 100,\n                  o: 60,\n                  color: '#6772E5'\n              }, {\n                  panelId: 2,\n                  x: 324,\n                  y: 56,\n                  o: 0,\n                  color: '#6772E5'\n              }, {\n                  panelId: 3,\n                  x: 249,\n                  y: -159,\n                  o: 60,\n                  color: '#6772E5'\n              }, {\n                  panelId: 4,\n                  x: 174,\n                  y: 56,\n                  o: 240,\n                  color: '#6772E5'\n              }, {\n                  panelId: 5,\n                  x: 324,\n                  y: -29,\n                  o: 60,\n                  color: '#6772E5'\n              }, {\n                  panelId: 6,\n                  x: -49,\n                  y: 100,\n                  o: 60,\n                  color: '#6772E5'\n              }, {\n                  panelId: 7,\n                  x: 399,\n                  y: 99,\n                  o: 300,\n                  color: '#6772E5'\n              }, {\n                  panelId: 8,\n                  x: 174,\n                  y: -29,\n                  o: 60,\n                  color: '#6772E5'\n              }, {\n                  panelId: 9,\n                  x: 25,\n                  y: 56,\n                  o: 120,\n                  color: '#6772E5'\n              }, {\n                  panelId: 10,\n                  x: 249,\n                  y: -73,\n                  o: 240,\n                  color: '#6772E5'\n              }]\n          }\n      }\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n          <Navbar/>\n          <div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n              <h1 className=\"display-4\" id=\"about\">Nanoleaf Layout</h1>\n              <p className=\"lead\">Quickly show a visual representation of the physical nanoleaf layout for your users!</p>\n\n              <div className=\"row\">\n                  <div className=\"col-md-5 offset-md-4\">\n                     <div className=\"nanoleaf-container-md\">\n                        <NanoleafLayout\n                            data={this.state.nanoleafData}\n                            onClick={data => console.log('Clicked!', data)}\n                            onHover={data => console.log('Hover', data)}\n                            onExit={data => console.log('Exited Hover', data)}\n                        />\n                     </div>\n                  </div>\n              </div>\n          </div>\n          <footer className=\"pt-4 my-md-5 pt-md-5 border-top\">\n              <div className=\"row\">\n                  <div className=\"col-12 col-md\">\n                      <img className=\"mb-2\" src=\"../../assets/brand/bootstrap-solid.svg\" alt=\"\" width=\"24\" height=\"24\" />\n                          <small className=\"d-block mb-3 text-muted\">Â© 2017-2018</small>\n                  </div>\n                  <div className=\"col-6 col-md\">\n                      <h5>Features</h5>\n                      <ul className=\"list-unstyled text-small\">\n                          <li><a className=\"text-muted\" href=\"#\">Cool stuff</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Random feature</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Team feature</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Stuff for developers</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Another one</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Last time</a></li>\n                      </ul>\n                  </div>\n                  <div className=\"col-6 col-md\">\n                      <h5>Resources</h5>\n                      <ul className=\"list-unstyled text-small\">\n                          <li><a className=\"text-muted\" href=\"#\">Resource</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Resource name</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Another resource</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Final resource</a></li>\n                      </ul>\n                  </div>\n                  <div className=\"col-6 col-md\">\n                      <h5>About</h5>\n                      <ul className=\"list-unstyled text-small\">\n                          <li><a className=\"text-muted\" href=\"#\">Team</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Locations</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Privacy</a></li>\n                          <li><a className=\"text-muted\" href=\"#\">Terms</a></li>\n                      </ul>\n                  </div>\n              </div>\n          </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0dbce86d.png\";"],"sourceRoot":""}